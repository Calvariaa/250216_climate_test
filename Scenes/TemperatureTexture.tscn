[gd_scene load_steps=11 format=3 uid="uid://d4dvfslqyptnp"]

[ext_resource type="Shader" uid="uid://d3vdyni4b2du" path="res://Shaders/PlaneMultiMesh.gdshader" id="2_k3lqd"]
[ext_resource type="Script" uid="uid://dniydk6c8x7gn" path="res://Scripts/SurfacesMultiMeshInstance3d.cs" id="3_8nwxo"]
[ext_resource type="Shader" uid="uid://c5qadt3e2xv5q" path="res://Shaders/TestQuad.gdshader" id="4_5youu"]

[sub_resource type="GDScript" id="GDScript_8nwxo"]
script/source = "extends Node3D
var node: Node3D
var camera: Camera3D

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	camera = get_node(\"CameraX/Camera3D\")
	node = get_node(\"CameraX\")

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(_delta: float) -> void:
	pass

func _input(event: InputEvent) -> void:
	_update_camera(event)


func _unhandled_input(_event: InputEvent) -> void:
	pass


var mouse_pos: Vector2
var mouse_move_flag: bool = false
var mouse_rotate_flag: bool = false
var mouse_move_sensitivity: float = 0.1
var mouse_rotation_sensitivity: float = 0.2
var mouse_zoom_sensitivity: float = 0.5
func _update_camera(event: InputEvent) -> void:
	# var distance_to_origin = camera.global_transform.origin.length()
	var distance_to_origin = 1
	# 平移：按住shift和鼠标中键
	if not mouse_rotate_flag and Input.is_mouse_button_pressed(MOUSE_BUTTON_LEFT) and Input.is_key_pressed(KEY_SHIFT):
		if not mouse_move_flag:
			Input.mouse_mode = Input.MOUSE_MODE_CONFINED_HIDDEN
			mouse_pos = get_viewport().get_mouse_position()
			print(mouse_pos)
			Input.mouse_mode = Input.MOUSE_MODE_CAPTURED
			mouse_move_flag = true

	if mouse_move_flag:
		if event is InputEventMouseMotion:
			var displacement = event.relative

			# Apply camera translation
			camera.translate(Vector3(-displacement.x * mouse_move_sensitivity * distance_to_origin, displacement.y * mouse_move_sensitivity * distance_to_origin, 0))
		if not Input.is_mouse_button_pressed(MOUSE_BUTTON_LEFT):
			Input.mouse_mode = Input.MOUSE_MODE_CONFINED_HIDDEN
			Input.warp_mouse(mouse_pos)
			Input.mouse_mode = Input.MOUSE_MODE_VISIBLE
			mouse_move_flag = false

	# 旋转：按住鼠标中键
	if not mouse_move_flag and Input.is_mouse_button_pressed(MOUSE_BUTTON_LEFT):
		if not mouse_rotate_flag:
			Input.mouse_mode = Input.MOUSE_MODE_CONFINED_HIDDEN
			mouse_pos = get_viewport().get_mouse_position()
			print(mouse_pos)
			Input.mouse_mode = Input.MOUSE_MODE_CAPTURED
			mouse_rotate_flag = true

	if mouse_rotate_flag:
		if event is InputEventMouseMotion:
			var displacement = event.relative

			# rotate(Vector3(1, 0, 0), deg_to_rad(displacement.y * mouse_rotation_sensitivity))
			# rotate(Vector3(0, 1, 0), deg_to_rad(-displacement.x * mouse_rotation_sensitivity))

			if abs(node.rotation.x - (1e-6)) < PI / 2 or node.rotation.x * displacement.y > 0:
				node.rotate_x(deg_to_rad(-displacement.y * mouse_rotation_sensitivity * distance_to_origin));
			rotate_y(deg_to_rad(-displacement.x * mouse_rotation_sensitivity * distance_to_origin));
		if not Input.is_mouse_button_pressed(MOUSE_BUTTON_LEFT):
			Input.mouse_mode = Input.MOUSE_MODE_CONFINED_HIDDEN
			Input.warp_mouse(mouse_pos)
			Input.mouse_mode = Input.MOUSE_MODE_VISIBLE
			mouse_rotate_flag = false

	if event is InputEventMouseButton:
		if event.button_index == MOUSE_BUTTON_WHEEL_UP:
			camera.translate(Vector3(0, 0, -mouse_zoom_sensitivity * distance_to_origin))
		elif event.button_index == MOUSE_BUTTON_WHEEL_DOWN:
			camera.translate(Vector3(0, 0, mouse_zoom_sensitivity * distance_to_origin))
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_5youu"]
render_priority = 0
shader = ExtResource("4_5youu")
shader_parameter/text_colour = Color(0.8, 0.85, 0.7, 1)
shader_parameter/background_colour = Color(0, 0, 0, 1)

[sub_resource type="QuadMesh" id="QuadMesh_4p560"]
material = SubResource("ShaderMaterial_5youu")
size = Vector2(1, 0.5)
subdivide_width = 200
subdivide_depth = 200

[sub_resource type="Texture2DRD" id="Texture2DRD_wi0ka"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_8nwxo"]
render_priority = 0
shader = ExtResource("2_k3lqd")
shader_parameter/cell_length = 0
shader_parameter/temperature_texture = SubResource("Texture2DRD_wi0ka")
shader_parameter/radius = 100.0
shader_parameter/line_width = 0.02

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_5youu"]

[sub_resource type="PointMesh" id="PointMesh_wi0ka"]
material = SubResource("StandardMaterial3D_5youu")

[node name="Node3D" type="Node3D"]

[node name="CameraY" type="Node3D" parent="."]
script = SubResource("GDScript_8nwxo")

[node name="CameraX" type="Node3D" parent="CameraY"]
transform = Transform3D(1, 0, 0, 0, 0.866025, 0.5, 0, -0.5, 0.866025, 0, 0, 0)

[node name="Camera3D" type="Camera3D" parent="CameraY/CameraX"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 100)

[node name="SpotLight3D" type="SpotLight3D" parent="CameraY/CameraX/Camera3D"]
transform = Transform3D(-4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0, 1, 0, 0, 0)
spot_range = 2000.0
spot_attenuation = 0.0
spot_angle = 90.0

[node name="MeshInstance3D" type="MeshInstance3D" parent="CameraY/CameraX/Camera3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 1.23188, 0.684165, -1.29298)
visible = false
mesh = SubResource("QuadMesh_4p560")
skeleton = NodePath("../../../..")

[node name="SurfacesMultiMeshInstance3D" type="MultiMeshInstance3D" parent="."]
material_override = SubResource("ShaderMaterial_8nwxo")
script = ExtResource("3_8nwxo")
ComputePath = "res://ComputeShaders/TemperatureCalculatorRK4.glsl"
Length = 128

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(100, 0, 0, 0, 100, 0, 0, 0, 100, 0, 0, 0)
visible = false
mesh = SubResource("PointMesh_wi0ka")
